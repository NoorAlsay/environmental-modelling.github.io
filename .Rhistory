a<-seq(-8,10,.5)
a
x=a[length(a):1]
x
y=c(a[1:round(length(a)/2)],99,a[(round(length(a)/2)+1):length(a)])
x=0:3
y=acos(cos(x))
x==y
x=c(sin(10),log(5,8),log(3,exp(1)),log(38.6,10),cos(pi+1), exp(1)^(cos(0)),atan(+Inf))
names(x)=c("sin(10)","log(5,8)","ln3","lg(38.6)","cos(pi+1)","e^cos(0)","arctn(+Inf)");
sort(x)
x=seq(-10,10,.01)
y=x[(x>-10 & x< -3) | (x>0 & x<6 & x!=3)]
f=c(rep("mouse",3),rep("rat",2),rep("fly",11))
f=rep(c("mouse","rat","fly"),c(3,2,11))
x=factor(f)
summary(x)
summary(f)
summary(1:10)
summary(1:10)[4]
dna=factor(rep(c("T","G","C","A"),c(16,38,6,10)))
ratio=summary(dna)/sum(summary(dna))
dna=factor(rep(c("T","G","C","A"),c(16,38,6,10)))
sample(dna)
dna
# sample(dna,size=84, replace=FALSE)
# подобный код выдаст ошибку, т.к. мы просим создать выборку больше исходника
# а вот следующий код будет работать, т.к. replace=TRUE генерирует выборки любого
# размера исходя из пропопрций элемнтов данной выборки
sample(dna,size=84, replace=TRUE)
sampledna=sample(c("A","T","G","C"), size=10000,replace=TRUE)
ratio=summary(factor(sampledna))/length(sampledna)
ratio2=summary(factor(dna))/length(dna)
ratio
ratio2
x=1:10
y=6:14
union(x,y)
intersect(x,y)
setdiff(x,y)
setdiff(y,x)
rm(list=ls())
cumsum(1:10)
dna2=sample(c("A","T","G","G","G","C"), size=3826513,replace=TRUE)
ratio=summary(factor(dna2))/length(dna2)
ratio
dna2=sample(c("A","T","G","C"), size=3826513,prob=c(.5/3,.5/3,.5,.5/3),replace=TRUE)
ratio=summary(factor(dna2))/length(dna2)
ratio
iris[iris$Species==c("setosa","virginica"),]
iris[iris$Species=="setosa" | iris$Species=="virginica",c("Petal.Length","Species")]
summary(factor(iris[(iris$Petal.Length>2 & iris$Petal.Length<6),"Species" ]))
my_func = function(p)
{
x=p^2
y=x^3
print("result")
return(c(x,y))
}
my_func(2)
mathses = function(p,q)
{
result = c(p+q,log(p+q,10),exp(p+q))
names(result) = c("summ", "log","exp")
return(result)
}
mathses(2,3)
mf = function(p)
{
if (p>0)
{
x=log(p)
return(x)
}
else
{
return(NULL)
}
}
mf(-1)
# gamma(x) gives !(x-1), we need to make function which makes true factorial
myfactorial = function(p)
{
if (p>0 & p%%1==0)
{return(gamma(p+1))}
else
{return(NULL)}
}
myfactorial(5)
myfactorial = function(p)
{
if (p>0 & p%%1==0)
{return(gamma(p+1))}
else
{return(NULL)}
}
mydistribution = function(x,p)
{
if ( x>=0 & x%%1==0 & p<=1 & p>0 )
{
return(p*(1-p)^x)
}
else
{
return(0)
}
}
mydistribution(3,.4)
sampledna=sample(c("A","T","G","C"), size=10000,replace=TRUE)
source('D:/124/alsaed/MathMod/Семинар.R', encoding = 'UTF-8', echo=TRUE)
source('D:/124/alsaed/MathMod/Семинар.R', encoding = 'UTF-8', echo=TRUE)
x=1:10
y=6:14
union(x,y)
intersect(x,y)
setdiff(x,y)
setdiff(y,x)
cumsum(1:10)
iris[iris$Species==c("setosa","virginica"),]
iris[iris$Species=="setosa" | iris$Species=="virginica",c("Petal.Length","Species")]
summary(factor(iris[(iris$Petal.Length>2 & iris$Petal.Length<6),"Species" ]))
my_func = function(p)
{
View(mathses)
View(mathses)
View(mf)
View(mydistribution)
View(myfactorial)
View(my_func)
View(mf)
x=1:3
x
x=1:5
names(x)
sort(x)
order(x)
x[order(x)]
x[c(4,1,2,3)]
x[order(x)]==x[c(2,3,4,1)]
x
x[4:1]
leng(x)
length(x)
a
a=seg(-8,4,0.5)
a
a=seq(-8,4,0.5)
a
round(length(a)/2)
acos(cos(x))==x
names(y)=c("sin(25)",log(2,56),3^5)
y=c(sin(25),log(2,56),3^5)
y
names(y)=c("sin(25)",log(2,56),3^5)
x
x=stq(-10,10,1)
x
x=seq(-10,10,1)
x
x[1:8]
x[x>-5]
x=seq(-10,10,1)
x[x<3]
[x!=3]
x[x!=3]
x[x>-4&x<0]
x[x>=-10&x<-3]
x[x >=-10 & x<-3]
x[x>=-10 & x<-3]
x[x>=-10 & x<-3]
x[x >= -10 & x =< -3]
x[x >= -10 & x => -3]
summary(x)
x=seq(-10,400,1)
x
summary(x)
t=c("картошка" , "мясо" , "борщ" )
t=c("картошка" , "мясо" , "борщ" )
t=req(t,4)
t1=factor(t)
rep("T",3)
REP(C("T",'G'),C(3,4))
REP(C("T","G'"),C(3,4))
REP(C("T","G"),C(3,4))
rep(C("T","G"),C(3,4))
rep(C("T","G"),C(3,4))
rep("T",3)
rep(C("T","G"),C(3,4))
rep(C("T","G"),(3,4))
rep(C("T","G"),(3,4))
rep(C("T","G"),c(3,4))
p
rep(C("T","G"),c(3,4))
rep("T",3)
x=1:10
y=6:14
x=1:10;x
y=6:14;y
setdiff(x,y)
setdiff(y,x)
dana2=sample(c("A","T","G","G","G") ,size=3826513,replac=TRUE)
ratio=summary(factor(dana2))/length(dana2); ratio
dana2=sample(c("A","T","G","G","G","G") ,size=3826513,replac=TRUE)
ratio=summary(factor(dana2))/length(dana2); ratio
dana2=sample(c("A","T","G","G","G","G") ,size=3826513,replac=TRUE)
dana2=sample(c("A","T","G","G","G","G") ,size=3826513,replac=TRUE)
ratio=summary(factor(dana2))/length(dana2); ratio
l=c(T,T,T,F)
t=C("a","b","c","d")
d;t;l
d=c(1,2,3,4)
t=C("a","b","c","d")
t
l=c(T,T,T,F)
d;t;l
df=data.farme(d,t,l)
df
df
df$d
summary (df)
data()
iris[1:5,]
dim(iris)
summary(iris)
iris[1:4,1:2]
iris[2,1]
colnames(iris)
iris[iris$srecies== "virginica",]
iris[iris$srecies== "virginica",]
iris[iris$srecies== "virginica",c(1,2,5)]
iris[iris$"srecies"== "virginica",c(1,2,5)]
data()
iris
dim(iris)
iris[iris$"srecies"== "virginica",c(1,2,5)]
summary(iris)
colnames(iris)
iris[iris$Petal.Length>2 & iris$Petal.Length<6,]
iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
factor( iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
factor( iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
summary(factor( iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
factor(
iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
iris[iris$Petal.Length>2 & iris$Petal.Length<6,"Species"]
plot(x,y)
x=1:100
y=sin(x)
plot(iris$Species,iris$Species)
plot(iris$Species,iris$Petal.Length)
plot(x,y,type = "b")
plot(x,y,type = "b")
plot(x,y)
x=1:100
y=sin(x)
plot(iris$Species,iris$Petal.Length)
plot(x,y,type = "b")
plot(x,y,type = "a","b","l")
plot(x,y,type = "b")
plot(x,y,type = "b",col="dark red")
plot(x,y,type = "b",col="dark red",lwd=10,lty=)
plot(x,y,type = "b",col="dark red",lwd=10,lty=1)
plot(x,y,type = "b",col="dark red",lwd=1,lty=1)
plot(x,y,type = "b",col="dark red",lwd=1,lty=4)
plot(x,y,type = "b",col="dark red",lwd=1,lty=4,pch=1)
plot(x,y,type = "b",col="dark red",lwd=1,lty=4,pch=20)
plot(x,y,type = "b",col="dark red",lwd=1,lty=4,pch=23)
install.packages("ggplot2")
library("ggplot2", lib.loc="~/R/win-library/3.4")
diamonds
mtcars
diamonds
ggplot(mtcars,aes(x=cyl,y=mpg))+geom_point()
ggplot(mtcars,aes(x=cyl,y=mpg,cd=disp))+geom_point()
ggplot(mtcars,aes(x=cyl,y=mpg))+geom_point()
ggplot(mtcars,aes(x=cyl,y=mpg,cd=disp))+geom_point()
ggplot(mtcars,aes(x=cyl,y=mpg,cd=disp))
ggplot(mtcars,aes(x=cyl,y=mpg,cd=disp))+geom_point()
ggplot(mtcars,aes(x=wt,y=mpg,col=cyl,size=disp))+geom_point()
ggplot(diamonds,aes(x=carat,y=price,col=clarity))=geom_point(alpha=0.4)+geom_smooth()
ggplot(mtcars,aes(x=wt,y=mpg,col=cyl,size=disp))+geom_point()
ggplot(diamonds,aes(x=carat,y=price,col=clarity))=geom_point(alpha=0.4)+geom_smooth()
ggplot(diamonds,aes(x=carat,y=price,col=clarity))+geom_point(alpha=0.4)+geom_smooth()
x
pie(x)
names(x)=c("noor","lens","bana")
names(x)=c("noor","lens","bana")
pie(x)
par(mfrow=(2,1))
par(mfrow=(2,1))
nour=function(n)
{
print("nonr")
}
nour(110)
nour=function(n)
{
print("result")
}
nour(110)
nour=function(n)
{
print("result")
x=p^2
return(x)
}
nour(11
print("result")
x=p^2
return(x)
}
{
print("result")
x=p^2
return(x)
}
no(11110002222233)
nour=function(n)
{
print("result")
x=p^2
x=p^5
return(c(x,y)
}
y=1.2
if {y>1}
y
else
"I do not know "
y=1.2
if (y>1)
{
sqrt(y)
}
y
else
{  "I do not know "}
y=0.11
{if (y>1)
{
sqrt(y)
}
y
else
{  "I do not know "}
l
l=list(1:20,3:56)
l
length(1[[2]])
l=list(1:20,3:56,23:47)
length(1)
length(1[[2]])
y=c()
for (i in 1:length (l))
{
z=mean(l[[i]])
x=i+2
print(i)
y=c(y,x)
}
y
{
print(i)
}
for (i in letters)
{
print(i)
}
for (i in c(1,8,26,13,22))
{
print(i)
}
apply(iris,2,summary)
return(NULL)
apply(iris,2,function(x){
if(typeoh(x)=="character"){
print("worng type of data")
return(NULL)
}
})
apply(iris,2,function(x){
if(typeof(x)=="character"){
print("worng type of data")
return(NULL)
}
})
apply(iris[,1:4],1,mean)
tapply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Petal.Width, iris$Species, max)
lappiy(1:10,sin)
lapply(1:10,sin)
sapply(1:10,FUN=sin, simpify = "FALSE")
sapply(1:10,FUN = sin, simpify = "FALSE")
sapply(1:10, FUN = sin, simpify = "FALSE")
sapply(1:10,FUN = sin, simpify = "FALSE")
sapply(1:10,FUN = sin, simpify = "FALSE")
sapply(1:10,FUN = sin, simplify = "FALSE")
install.packages("diamonds")
library("ggplot2", lib.loc="~/R/win-library/3.4")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/win-library/3.4")
names(diamonds)
diamonds$price[diamonds$price>100]/diamonds$carat[diamonds$price>100]
tapply(diamonds$price[diamonds$price>100]/diamonds$carat[diamonds$price>100]/
diamonds$clarity[diamonds$price>1000],mean)
eddypro <- read_csv("eddypro.csv", comment = "[", skip = 1)
eddypro
library("tidyverse")
#library("nycflights13")
library("tidyr")
library("stringr")
library("dplyr")
library("tibble")
library("readr")
setwd("C:/NOUR")
eddypro <- read_csv("eddypro.csv", comment = "[", skip = 1)
eddypro = eddypro[-1,]
eddypro = eddypro[eddypro$DOY >150 & eddypro$DOY <240, ] #  выбрали летние дни
eddypro = eddypro[eddypro$daytime == "T", ]
# eddypro$co2_flux - то что мы моделируем
tbl = eddypro
tbl = select(tbl, -(roll))
tbl = tbl %>% mutate_if(is.character, factor)
tbl[tbl == -9999] = NA
#переименовали колонки, так чтобы в них не было лишних символов
names(tbl) = names(tbl) %>%
str_replace_all("[!]","_emph_") %>%
str_replace_all("[?]","_quest_") %>%
str_replace_all("[*]","_star_") %>%
str_replace_all("[+]","_plus_") %>%
str_replace_all("[-]","_minus_") %>%
str_replace_all("[@]","_at_") %>%
str_replace_all("[$]","_dollar_") %>%
str_replace_all("[#]","_hash_") %>%
str_replace_all("[/]","_div_") %>%
str_replace_all("[%]","_perc_") %>%
str_replace_all("[&]","_amp_") %>%
str_replace_all("[\\^]","_power_") %>%
str_replace_all("[()]","_")
glimpse(tbl)
tbl_numeric = tbl[,sapply(tbl,is.numeric) ]
cor_td = cor(drop_na(tbl_numeric))
cor_td = as.tibble(cor_td)
variables = names(cor_td)[cor_td$co2_flux^2 >0.16]
variables = variables[!is.na(variables)]
formula1 = co2_flux~LE+rand_err_LE+rand_err_co2_flux+h2o_flux+rand_err_h2o_flux+sonic_temperature+air_temperature+air_density+air_molar_volume+RH+un_LE+un_co2_flux+un_h2o_flux+mean_value+h2o_var+w_div_co2_cov+w_div_h2o_cov+co2_signal_strength_7200+h2o_signal_strength_7200+flowrate
model1 = lm(formula1,data =tbl_numeric)
summary(model1)
formula2 = co2_flux ~ LE + rand_err_LE + h2o_flux +un_LE+un_co2_flux+un_h2o_flux+h2o_var+w_div_co2_cov+co2_signal_strength_7200+h2o_signal_strength_7200+flowrate
model2 = lm(formula2,data =tbl_numeric)
summary(model2)
formula3 = co2_flux ~ LE + rand_err_LE + h2o_flux +un_LE+un_co2_flux+un_h2o_flux+w_div_co2_cov+co2_signal_strength_7200
model3 = lm(formula3,data =tbl_numeric)
summary(model3)
formula4 = co2_flux ~ LE + h2o_flux +un_LE+un_co2_flux+un_h2o_flux+w_div_co2_cov+co2_signal_strength_7200
model4 = lm(formula4,data =tbl_numeric)
summary(model4)
View(tbl_numeric)
View(tbl_numeric)
View(cor_td)
View(tbl)
library("tidyverse")
#library("nycflights13")
library("tidyr")
library("stringr")
library("dplyr")
library("tibble")
library("readr")
setwd("C:/NOUR")
eddypro <- read_csv("eddypro.csv", comment = "[", skip = 1)
eddypro = eddypro[-1,]
eddypro = eddypro[eddypro$DOY >150 & eddypro$DOY <240, ] #  выбрали летние дни
eddypro = eddypro[eddypro$daytime == "T", ]
# eddypro$co2_flux - то что мы моделируем
tbl = eddypro
tbl = select(tbl, -(roll))
tbl = tbl %>% mutate_if(is.character, factor)
tbl[tbl == -9999] = NA
#переименовали колонки, так чтобы в них не было лишних символов
names(tbl) = names(tbl) %>%
str_replace_all("[!]","_emph_") %>%
str_replace_all("[?]","_quest_") %>%
str_replace_all("[*]","_star_") %>%
str_replace_all("[+]","_plus_") %>%
str_replace_all("[-]","_minus_") %>%
str_replace_all("[@]","_at_") %>%
str_replace_all("[$]","_dollar_") %>%
str_replace_all("[#]","_hash_") %>%
str_replace_all("[/]","_div_") %>%
str_replace_all("[%]","_perc_") %>%
str_replace_all("[&]","_amp_") %>%
str_replace_all("[\\^]","_power_") %>%
str_replace_all("[()]","_")
glimpse(tbl)
tbl_numeric = tbl[,sapply(tbl,is.numeric) ]
cor_td = cor(drop_na(tbl_numeric))
cor_td = as.tibble(cor_td)
variables = names(cor_td)[cor_td$co2_flux^2 >0.16]
variables = variables[!is.na(variables)]
formula1 = co2_flux~LE+rand_err_LE+rand_err_co2_flux+h2o_flux+rand_err_h2o_flux+sonic_temperature+air_temperature+air_density+air_molar_volume+RH+un_LE+un_co2_flux+un_h2o_flux+mean_value+h2o_var+w_div_co2_cov+w_div_h2o_cov+co2_signal_strength_7200+h2o_signal_strength_7200+flowrate
model1 = lm(formula1,data =tbl_numeric)
summary(model1)
formula2 = co2_flux ~ LE + rand_err_LE + h2o_flux +un_LE+un_co2_flux+un_h2o_flux+h2o_var+w_div_co2_cov+co2_signal_strength_7200+h2o_signal_strength_7200+flowrate
model2 = lm(formula2,data =tbl_numeric)
summary(model2)
formula3 = co2_flux ~ LE + rand_err_LE + h2o_flux +un_LE+un_co2_flux+un_h2o_flux+w_div_co2_cov+co2_signal_strength_7200
model3 = lm(formula3,data =tbl_numeric)
summary(model3)
formula4 = co2_flux ~ LE + h2o_flux +un_LE+un_co2_flux+un_h2o_flux+w_div_co2_cov+co2_signal_strength_7200
model4 = lm(formula4,data =tbl_numeric)
summary(model4)
